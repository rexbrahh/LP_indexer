// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dex/sol/v1/core.proto

#include "dex/sol/v1/core.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dex {
namespace sol {
namespace v1 {
PROTOBUF_CONSTEXPR U128::U128(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/uint64_t{0u}
  , /*decltype(_impl_.lo_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct U128DefaultTypeInternal {
  PROTOBUF_CONSTEXPR U128DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~U128DefaultTypeInternal() {}
  union {
    U128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 U128DefaultTypeInternal _U128_default_instance_;
PROTOBUF_CONSTEXPR BlockHead::BlockHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_)*/uint64_t{0u}
  , /*decltype(_impl_.ts_sec_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockHeadDefaultTypeInternal() {}
  union {
    BlockHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockHeadDefaultTypeInternal _BlockHead_default_instance_;
PROTOBUF_CONSTEXPR TxMeta::TxMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_msgs_)*/{}
  , /*decltype(_impl_.sig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_)*/uint64_t{0u}
  , /*decltype(_impl_.cu_used_)*/uint64_t{0u}
  , /*decltype(_impl_.cu_price_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMetaDefaultTypeInternal() {}
  union {
    TxMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMetaDefaultTypeInternal _TxMeta_default_instance_;
PROTOBUF_CONSTEXPR SwapEvent::SwapEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.program_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pool_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mint_base_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mint_quote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_)*/uint64_t{0u}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.dec_base_)*/0u
  , /*decltype(_impl_.base_in_)*/uint64_t{0u}
  , /*decltype(_impl_.base_out_)*/uint64_t{0u}
  , /*decltype(_impl_.quote_in_)*/uint64_t{0u}
  , /*decltype(_impl_.quote_out_)*/uint64_t{0u}
  , /*decltype(_impl_.dec_quote_)*/0u
  , /*decltype(_impl_.fee_bps_)*/0u
  , /*decltype(_impl_.sqrt_price_q64_pre_)*/uint64_t{0u}
  , /*decltype(_impl_.sqrt_price_q64_post_)*/uint64_t{0u}
  , /*decltype(_impl_.reserves_base_)*/uint64_t{0u}
  , /*decltype(_impl_.reserves_quote_)*/uint64_t{0u}
  , /*decltype(_impl_.provisional_)*/false
  , /*decltype(_impl_.is_undo_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwapEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwapEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwapEventDefaultTypeInternal() {}
  union {
    SwapEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwapEventDefaultTypeInternal _SwapEvent_default_instance_;
PROTOBUF_CONSTEXPR PoolSnapshot::PoolSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pool_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mint_base_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mint_quote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_)*/uint64_t{0u}
  , /*decltype(_impl_.sqrt_price_q64_)*/uint64_t{0u}
  , /*decltype(_impl_.reserves_base_)*/uint64_t{0u}
  , /*decltype(_impl_.reserves_quote_)*/uint64_t{0u}
  , /*decltype(_impl_.liquidity_)*/uint64_t{0u}
  , /*decltype(_impl_.fee_bps_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoolSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoolSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoolSnapshotDefaultTypeInternal() {}
  union {
    PoolSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoolSnapshotDefaultTypeInternal _PoolSnapshot_default_instance_;
PROTOBUF_CONSTEXPR Candle::Candle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pair_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pool_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeframe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vwap_num_)*/nullptr
  , /*decltype(_impl_.vwap_den_)*/nullptr
  , /*decltype(_impl_.vol_base_)*/nullptr
  , /*decltype(_impl_.vol_quote_)*/nullptr
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.window_start_)*/uint64_t{0u}
  , /*decltype(_impl_.open_px_q32_)*/int64_t{0}
  , /*decltype(_impl_.provisional_)*/false
  , /*decltype(_impl_.is_correction_)*/false
  , /*decltype(_impl_.trades_)*/0u
  , /*decltype(_impl_.high_px_q32_)*/int64_t{0}
  , /*decltype(_impl_.low_px_q32_)*/int64_t{0}
  , /*decltype(_impl_.close_px_q32_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleDefaultTypeInternal() {}
  union {
    Candle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleDefaultTypeInternal _Candle_default_instance_;
PROTOBUF_CONSTEXPR WalletHeuristics::WalletHeuristics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wallet_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.first_seen_slot_)*/uint64_t{0u}
  , /*decltype(_impl_.swaps_24h_)*/0u
  , /*decltype(_impl_.swaps_7d_)*/0u
  , /*decltype(_impl_.is_fresh_)*/false
  , /*decltype(_impl_.is_sniper_)*/false
  , /*decltype(_impl_.bundled_pct_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletHeuristicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletHeuristicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletHeuristicsDefaultTypeInternal() {}
  union {
    WalletHeuristics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletHeuristicsDefaultTypeInternal _WalletHeuristics_default_instance_;
}  // namespace v1
}  // namespace sol
}  // namespace dex
static ::_pb::Metadata file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dex_2fsol_2fv1_2fcore_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dex_2fsol_2fv1_2fcore_2eproto = nullptr;

const uint32_t TableStruct_dex_2fsol_2fv1_2fcore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::U128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::U128, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::U128, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::BlockHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::BlockHead, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::BlockHead, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::BlockHead, _impl_.ts_sec_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::BlockHead, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.sig_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.cu_used_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.cu_price_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::TxMeta, _impl_.log_msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.sig_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.program_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.pool_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.mint_base_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.mint_quote_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.dec_base_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.dec_quote_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.base_in_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.base_out_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.quote_in_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.quote_out_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.sqrt_price_q64_pre_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.sqrt_price_q64_post_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.reserves_base_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.reserves_quote_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.fee_bps_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.provisional_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::SwapEvent, _impl_.is_undo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.pool_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.mint_base_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.mint_quote_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.sqrt_price_q64_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.reserves_base_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.reserves_quote_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.fee_bps_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::PoolSnapshot, _impl_.liquidity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.pair_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.pool_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.timeframe_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.window_start_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.provisional_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.is_correction_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.open_px_q32_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.high_px_q32_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.low_px_q32_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.close_px_q32_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.vwap_num_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.vwap_den_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.vol_base_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.vol_quote_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::Candle, _impl_.trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.wallet_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.first_seen_slot_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.swaps_24h_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.swaps_7d_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.is_fresh_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.is_sniper_),
  PROTOBUF_FIELD_OFFSET(::dex::sol::v1::WalletHeuristics, _impl_.bundled_pct_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dex::sol::v1::U128)},
  { 8, -1, -1, sizeof(::dex::sol::v1::BlockHead)},
  { 18, -1, -1, sizeof(::dex::sol::v1::TxMeta)},
  { 31, -1, -1, sizeof(::dex::sol::v1::SwapEvent)},
  { 58, -1, -1, sizeof(::dex::sol::v1::PoolSnapshot)},
  { 74, -1, -1, sizeof(::dex::sol::v1::Candle)},
  { 96, -1, -1, sizeof(::dex::sol::v1::WalletHeuristics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dex::sol::v1::_U128_default_instance_._instance,
  &::dex::sol::v1::_BlockHead_default_instance_._instance,
  &::dex::sol::v1::_TxMeta_default_instance_._instance,
  &::dex::sol::v1::_SwapEvent_default_instance_._instance,
  &::dex::sol::v1::_PoolSnapshot_default_instance_._instance,
  &::dex::sol::v1::_Candle_default_instance_._instance,
  &::dex::sol::v1::_WalletHeuristics_default_instance_._instance,
};

const char descriptor_table_protodef_dex_2fsol_2fv1_2fcore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025dex/sol/v1/core.proto\022\ndex.sol.v1\"\036\n\004U"
  "128\022\n\n\002hi\030\001 \001(\004\022\n\n\002lo\030\002 \001(\004\"K\n\tBlockHead"
  "\022\020\n\010chain_id\030\001 \001(\004\022\014\n\004slot\030\002 \001(\004\022\016\n\006ts_s"
  "ec\030\003 \001(\004\022\016\n\006status\030\004 \001(\t\"{\n\006TxMeta\022\020\n\010ch"
  "ain_id\030\001 \001(\004\022\014\n\004slot\030\002 \001(\004\022\013\n\003sig\030\003 \001(\t\022"
  "\017\n\007success\030\004 \001(\010\022\017\n\007cu_used\030\005 \001(\004\022\020\n\010cu_"
  "price\030\006 \001(\004\022\020\n\010log_msgs\030\007 \003(\t\"\237\003\n\tSwapEv"
  "ent\022\020\n\010chain_id\030\001 \001(\004\022\014\n\004slot\030\002 \001(\004\022\013\n\003s"
  "ig\030\003 \001(\t\022\r\n\005index\030\004 \001(\r\022\022\n\nprogram_id\030\005 "
  "\001(\t\022\017\n\007pool_id\030\006 \001(\t\022\021\n\tmint_base\030\007 \001(\t\022"
  "\022\n\nmint_quote\030\010 \001(\t\022\020\n\010dec_base\030\t \001(\r\022\021\n"
  "\tdec_quote\030\n \001(\r\022\017\n\007base_in\030\013 \001(\004\022\020\n\010bas"
  "e_out\030\014 \001(\004\022\020\n\010quote_in\030\r \001(\004\022\021\n\tquote_o"
  "ut\030\016 \001(\004\022\032\n\022sqrt_price_q64_pre\030\017 \001(\004\022\033\n\023"
  "sqrt_price_q64_post\030\020 \001(\004\022\025\n\rreserves_ba"
  "se\030\021 \001(\004\022\026\n\016reserves_quote\030\022 \001(\004\022\017\n\007fee_"
  "bps\030\023 \001(\r\022\023\n\013provisional\030\024 \001(\010\022\017\n\007is_und"
  "o\030\025 \001(\010\"\321\001\n\014PoolSnapshot\022\020\n\010chain_id\030\001 \001"
  "(\004\022\014\n\004slot\030\002 \001(\004\022\017\n\007pool_id\030\003 \001(\t\022\021\n\tmin"
  "t_base\030\004 \001(\t\022\022\n\nmint_quote\030\005 \001(\t\022\026\n\016sqrt"
  "_price_q64\030\006 \001(\004\022\025\n\rreserves_base\030\007 \001(\004\022"
  "\026\n\016reserves_quote\030\010 \001(\004\022\017\n\007fee_bps\030\t \001(\r"
  "\022\021\n\tliquidity\030\n \001(\004\"\206\003\n\006Candle\022\020\n\010chain_"
  "id\030\001 \001(\004\022\017\n\007pair_id\030\002 \001(\t\022\017\n\007pool_id\030\003 \001"
  "(\t\022\021\n\ttimeframe\030\004 \001(\t\022\024\n\014window_start\030\005 "
  "\001(\004\022\023\n\013provisional\030\006 \001(\010\022\025\n\ris_correctio"
  "n\030\007 \001(\010\022\023\n\013open_px_q32\030\n \001(\003\022\023\n\013high_px_"
  "q32\030\013 \001(\003\022\022\n\nlow_px_q32\030\014 \001(\003\022\024\n\014close_p"
  "x_q32\030\r \001(\003\022\"\n\010vwap_num\030\016 \001(\0132\020.dex.sol."
  "v1.U128\022\"\n\010vwap_den\030\017 \001(\0132\020.dex.sol.v1.U"
  "128\022\"\n\010vol_base\030\020 \001(\0132\020.dex.sol.v1.U128\022"
  "#\n\tvol_quote\030\021 \001(\0132\020.dex.sol.v1.U128\022\016\n\006"
  "trades\030\022 \001(\r\"\254\001\n\020WalletHeuristics\022\020\n\010cha"
  "in_id\030\001 \001(\004\022\016\n\006wallet\030\002 \001(\t\022\027\n\017first_see"
  "n_slot\030\003 \001(\004\022\021\n\tswaps_24h\030\004 \001(\r\022\020\n\010swaps"
  "_7d\030\005 \001(\r\022\020\n\010is_fresh\030\006 \001(\010\022\021\n\tis_sniper"
  "\030\007 \001(\010\022\023\n\013bundled_pct\030\010 \001(\002B;Z9github.co"
  "m/rexbrahh/lp-indexer/gen/go/dex/sol/v1;"
  "dexsolv1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dex_2fsol_2fv1_2fcore_2eproto = {
    false, false, 1536, descriptor_table_protodef_dex_2fsol_2fv1_2fcore_2eproto,
    "dex/sol/v1/core.proto",
    &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_dex_2fsol_2fv1_2fcore_2eproto::offsets,
    file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto, file_level_enum_descriptors_dex_2fsol_2fv1_2fcore_2eproto,
    file_level_service_descriptors_dex_2fsol_2fv1_2fcore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter() {
  return &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dex_2fsol_2fv1_2fcore_2eproto(&descriptor_table_dex_2fsol_2fv1_2fcore_2eproto);
namespace dex {
namespace sol {
namespace v1 {

// ===================================================================

class U128::_Internal {
 public:
};

U128::U128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.U128)
}
U128::U128(const U128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  U128* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){}
    , decltype(_impl_.lo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hi_, &from._impl_.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lo_) -
    reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.lo_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.U128)
}

inline void U128::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){uint64_t{0u}}
    , decltype(_impl_.lo_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

U128::~U128() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.U128)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void U128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void U128::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void U128::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.U128)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lo_) -
      reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.lo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* U128::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* U128::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.U128)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hi(), target);
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.U128)
  return target;
}

size_t U128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.U128)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hi());
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData U128::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    U128::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*U128::GetClassData() const { return &_class_data_; }


void U128::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<U128*>(&to_msg);
  auto& from = static_cast<const U128&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.U128)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void U128::CopyFrom(const U128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.U128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U128::IsInitialized() const {
  return true;
}

void U128::InternalSwap(U128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(U128, _impl_.lo_)
      + sizeof(U128::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(U128, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata U128::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[0]);
}

// ===================================================================

class BlockHead::_Internal {
 public:
};

BlockHead::BlockHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.BlockHead)
}
BlockHead::BlockHead(const BlockHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.ts_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ts_sec_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.ts_sec_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.BlockHead)
}

inline void BlockHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.slot_){uint64_t{0u}}
    , decltype(_impl_.ts_sec_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockHead::~BlockHead() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.BlockHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void BlockHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockHead::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.BlockHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ts_sec_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.ts_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ts_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.BlockHead.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.BlockHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chain_id(), target);
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_slot(), target);
  }

  // uint64 ts_sec = 3;
  if (this->_internal_ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ts_sec(), target);
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.BlockHead.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.BlockHead)
  return target;
}

size_t BlockHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.BlockHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 4;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_slot());
  }

  // uint64 ts_sec = 3;
  if (this->_internal_ts_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ts_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHead::GetClassData() const { return &_class_data_; }


void BlockHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockHead*>(&to_msg);
  auto& from = static_cast<const BlockHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.BlockHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_ts_sec() != 0) {
    _this->_internal_set_ts_sec(from._internal_ts_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHead::CopyFrom(const BlockHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.BlockHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHead::IsInitialized() const {
  return true;
}

void BlockHead::InternalSwap(BlockHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHead, _impl_.ts_sec_)
      + sizeof(BlockHead::_impl_.ts_sec_)
      - PROTOBUF_FIELD_OFFSET(BlockHead, _impl_.chain_id_)>(
          reinterpret_cast<char*>(&_impl_.chain_id_),
          reinterpret_cast<char*>(&other->_impl_.chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[1]);
}

// ===================================================================

class TxMeta::_Internal {
 public:
};

TxMeta::TxMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.TxMeta)
}
TxMeta::TxMeta(const TxMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_msgs_){from._impl_.log_msgs_}
    , decltype(_impl_.sig_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.cu_used_){}
    , decltype(_impl_.cu_price_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig().empty()) {
    _this->_impl_.sig_.Set(from._internal_sig(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.TxMeta)
}

inline void TxMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_msgs_){arena}
    , decltype(_impl_.sig_){}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.slot_){uint64_t{0u}}
    , decltype(_impl_.cu_used_){uint64_t{0u}}
    , decltype(_impl_.cu_price_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMeta::~TxMeta() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.TxMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_msgs_.~RepeatedPtrField();
  _impl_.sig_.Destroy();
}

void TxMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.TxMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_msgs_.Clear();
  _impl_.sig_.ClearToEmpty();
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.TxMeta.sig"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cu_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cu_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cu_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cu_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string log_msgs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_log_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.TxMeta.log_msgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.TxMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chain_id(), target);
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_slot(), target);
  }

  // string sig = 3;
  if (!this->_internal_sig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.TxMeta.sig");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sig(), target);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // uint64 cu_used = 5;
  if (this->_internal_cu_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_cu_used(), target);
  }

  // uint64 cu_price = 6;
  if (this->_internal_cu_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cu_price(), target);
  }

  // repeated string log_msgs = 7;
  for (int i = 0, n = this->_internal_log_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_log_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.TxMeta.log_msgs");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.TxMeta)
  return target;
}

size_t TxMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.TxMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string log_msgs = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.log_msgs_.size());
  for (int i = 0, n = _impl_.log_msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.log_msgs_.Get(i));
  }

  // string sig = 3;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_slot());
  }

  // uint64 cu_used = 5;
  if (this->_internal_cu_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cu_used());
  }

  // uint64 cu_price = 6;
  if (this->_internal_cu_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cu_price());
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMeta::GetClassData() const { return &_class_data_; }


void TxMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMeta*>(&to_msg);
  auto& from = static_cast<const TxMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.TxMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.log_msgs_.MergeFrom(from._impl_.log_msgs_);
  if (!from._internal_sig().empty()) {
    _this->_internal_set_sig(from._internal_sig());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_cu_used() != 0) {
    _this->_internal_set_cu_used(from._internal_cu_used());
  }
  if (from._internal_cu_price() != 0) {
    _this->_internal_set_cu_price(from._internal_cu_price());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMeta::CopyFrom(const TxMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.TxMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMeta::IsInitialized() const {
  return true;
}

void TxMeta::InternalSwap(TxMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.log_msgs_.InternalSwap(&other->_impl_.log_msgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sig_, lhs_arena,
      &other->_impl_.sig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxMeta, _impl_.success_)
      + sizeof(TxMeta::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(TxMeta, _impl_.chain_id_)>(
          reinterpret_cast<char*>(&_impl_.chain_id_),
          reinterpret_cast<char*>(&other->_impl_.chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[2]);
}

// ===================================================================

class SwapEvent::_Internal {
 public:
};

SwapEvent::SwapEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.SwapEvent)
}
SwapEvent::SwapEvent(const SwapEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwapEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sig_){}
    , decltype(_impl_.program_id_){}
    , decltype(_impl_.pool_id_){}
    , decltype(_impl_.mint_base_){}
    , decltype(_impl_.mint_quote_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.dec_base_){}
    , decltype(_impl_.base_in_){}
    , decltype(_impl_.base_out_){}
    , decltype(_impl_.quote_in_){}
    , decltype(_impl_.quote_out_){}
    , decltype(_impl_.dec_quote_){}
    , decltype(_impl_.fee_bps_){}
    , decltype(_impl_.sqrt_price_q64_pre_){}
    , decltype(_impl_.sqrt_price_q64_post_){}
    , decltype(_impl_.reserves_base_){}
    , decltype(_impl_.reserves_quote_){}
    , decltype(_impl_.provisional_){}
    , decltype(_impl_.is_undo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig().empty()) {
    _this->_impl_.sig_.Set(from._internal_sig(), 
      _this->GetArenaForAllocation());
  }
  _impl_.program_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program_id().empty()) {
    _this->_impl_.program_id_.Set(from._internal_program_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pool_id().empty()) {
    _this->_impl_.pool_id_.Set(from._internal_pool_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mint_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mint_base().empty()) {
    _this->_impl_.mint_base_.Set(from._internal_mint_base(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mint_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mint_quote().empty()) {
    _this->_impl_.mint_quote_.Set(from._internal_mint_quote(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_undo_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.is_undo_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.SwapEvent)
}

inline void SwapEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sig_){}
    , decltype(_impl_.program_id_){}
    , decltype(_impl_.pool_id_){}
    , decltype(_impl_.mint_base_){}
    , decltype(_impl_.mint_quote_){}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.slot_){uint64_t{0u}}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.dec_base_){0u}
    , decltype(_impl_.base_in_){uint64_t{0u}}
    , decltype(_impl_.base_out_){uint64_t{0u}}
    , decltype(_impl_.quote_in_){uint64_t{0u}}
    , decltype(_impl_.quote_out_){uint64_t{0u}}
    , decltype(_impl_.dec_quote_){0u}
    , decltype(_impl_.fee_bps_){0u}
    , decltype(_impl_.sqrt_price_q64_pre_){uint64_t{0u}}
    , decltype(_impl_.sqrt_price_q64_post_){uint64_t{0u}}
    , decltype(_impl_.reserves_base_){uint64_t{0u}}
    , decltype(_impl_.reserves_quote_){uint64_t{0u}}
    , decltype(_impl_.provisional_){false}
    , decltype(_impl_.is_undo_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.program_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mint_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mint_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwapEvent::~SwapEvent() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.SwapEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwapEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sig_.Destroy();
  _impl_.program_id_.Destroy();
  _impl_.pool_id_.Destroy();
  _impl_.mint_base_.Destroy();
  _impl_.mint_quote_.Destroy();
}

void SwapEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.SwapEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sig_.ClearToEmpty();
  _impl_.program_id_.ClearToEmpty();
  _impl_.pool_id_.ClearToEmpty();
  _impl_.mint_base_.ClearToEmpty();
  _impl_.mint_quote_.ClearToEmpty();
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_undo_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.is_undo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.SwapEvent.sig"));
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string program_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_program_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.SwapEvent.program_id"));
        } else
          goto handle_unusual;
        continue;
      // string pool_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pool_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.SwapEvent.pool_id"));
        } else
          goto handle_unusual;
        continue;
      // string mint_base = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mint_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.SwapEvent.mint_base"));
        } else
          goto handle_unusual;
        continue;
      // string mint_quote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mint_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.SwapEvent.mint_quote"));
        } else
          goto handle_unusual;
        continue;
      // uint32 dec_base = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.dec_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dec_quote = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.dec_quote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 base_in = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.base_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 base_out = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.base_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_in = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.quote_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_out = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.quote_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sqrt_price_q64_pre = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.sqrt_price_q64_pre_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sqrt_price_q64_post = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.sqrt_price_q64_post_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reserves_base = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.reserves_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reserves_quote = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.reserves_quote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fee_bps = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.fee_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool provisional = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.provisional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_undo = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.is_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwapEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.SwapEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chain_id(), target);
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_slot(), target);
  }

  // string sig = 3;
  if (!this->_internal_sig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.SwapEvent.sig");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sig(), target);
  }

  // uint32 index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // string program_id = 5;
  if (!this->_internal_program_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_program_id().data(), static_cast<int>(this->_internal_program_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.SwapEvent.program_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_program_id(), target);
  }

  // string pool_id = 6;
  if (!this->_internal_pool_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pool_id().data(), static_cast<int>(this->_internal_pool_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.SwapEvent.pool_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pool_id(), target);
  }

  // string mint_base = 7;
  if (!this->_internal_mint_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_base().data(), static_cast<int>(this->_internal_mint_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.SwapEvent.mint_base");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mint_base(), target);
  }

  // string mint_quote = 8;
  if (!this->_internal_mint_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_quote().data(), static_cast<int>(this->_internal_mint_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.SwapEvent.mint_quote");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mint_quote(), target);
  }

  // uint32 dec_base = 9;
  if (this->_internal_dec_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_dec_base(), target);
  }

  // uint32 dec_quote = 10;
  if (this->_internal_dec_quote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dec_quote(), target);
  }

  // uint64 base_in = 11;
  if (this->_internal_base_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_base_in(), target);
  }

  // uint64 base_out = 12;
  if (this->_internal_base_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_base_out(), target);
  }

  // uint64 quote_in = 13;
  if (this->_internal_quote_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_quote_in(), target);
  }

  // uint64 quote_out = 14;
  if (this->_internal_quote_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_quote_out(), target);
  }

  // uint64 sqrt_price_q64_pre = 15;
  if (this->_internal_sqrt_price_q64_pre() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_sqrt_price_q64_pre(), target);
  }

  // uint64 sqrt_price_q64_post = 16;
  if (this->_internal_sqrt_price_q64_post() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_sqrt_price_q64_post(), target);
  }

  // uint64 reserves_base = 17;
  if (this->_internal_reserves_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_reserves_base(), target);
  }

  // uint64 reserves_quote = 18;
  if (this->_internal_reserves_quote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_reserves_quote(), target);
  }

  // uint32 fee_bps = 19;
  if (this->_internal_fee_bps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_fee_bps(), target);
  }

  // bool provisional = 20;
  if (this->_internal_provisional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_provisional(), target);
  }

  // bool is_undo = 21;
  if (this->_internal_is_undo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.SwapEvent)
  return target;
}

size_t SwapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.SwapEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sig = 3;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // string program_id = 5;
  if (!this->_internal_program_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_program_id());
  }

  // string pool_id = 6;
  if (!this->_internal_pool_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pool_id());
  }

  // string mint_base = 7;
  if (!this->_internal_mint_base().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_base());
  }

  // string mint_quote = 8;
  if (!this->_internal_mint_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_quote());
  }

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_slot());
  }

  // uint32 index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 dec_base = 9;
  if (this->_internal_dec_base() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dec_base());
  }

  // uint64 base_in = 11;
  if (this->_internal_base_in() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_in());
  }

  // uint64 base_out = 12;
  if (this->_internal_base_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_out());
  }

  // uint64 quote_in = 13;
  if (this->_internal_quote_in() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_quote_in());
  }

  // uint64 quote_out = 14;
  if (this->_internal_quote_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_quote_out());
  }

  // uint32 dec_quote = 10;
  if (this->_internal_dec_quote() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dec_quote());
  }

  // uint32 fee_bps = 19;
  if (this->_internal_fee_bps() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fee_bps());
  }

  // uint64 sqrt_price_q64_pre = 15;
  if (this->_internal_sqrt_price_q64_pre() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sqrt_price_q64_pre());
  }

  // uint64 sqrt_price_q64_post = 16;
  if (this->_internal_sqrt_price_q64_post() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sqrt_price_q64_post());
  }

  // uint64 reserves_base = 17;
  if (this->_internal_reserves_base() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_reserves_base());
  }

  // uint64 reserves_quote = 18;
  if (this->_internal_reserves_quote() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_reserves_quote());
  }

  // bool provisional = 20;
  if (this->_internal_provisional() != 0) {
    total_size += 2 + 1;
  }

  // bool is_undo = 21;
  if (this->_internal_is_undo() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwapEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapEvent::GetClassData() const { return &_class_data_; }


void SwapEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwapEvent*>(&to_msg);
  auto& from = static_cast<const SwapEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.SwapEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig().empty()) {
    _this->_internal_set_sig(from._internal_sig());
  }
  if (!from._internal_program_id().empty()) {
    _this->_internal_set_program_id(from._internal_program_id());
  }
  if (!from._internal_pool_id().empty()) {
    _this->_internal_set_pool_id(from._internal_pool_id());
  }
  if (!from._internal_mint_base().empty()) {
    _this->_internal_set_mint_base(from._internal_mint_base());
  }
  if (!from._internal_mint_quote().empty()) {
    _this->_internal_set_mint_quote(from._internal_mint_quote());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_dec_base() != 0) {
    _this->_internal_set_dec_base(from._internal_dec_base());
  }
  if (from._internal_base_in() != 0) {
    _this->_internal_set_base_in(from._internal_base_in());
  }
  if (from._internal_base_out() != 0) {
    _this->_internal_set_base_out(from._internal_base_out());
  }
  if (from._internal_quote_in() != 0) {
    _this->_internal_set_quote_in(from._internal_quote_in());
  }
  if (from._internal_quote_out() != 0) {
    _this->_internal_set_quote_out(from._internal_quote_out());
  }
  if (from._internal_dec_quote() != 0) {
    _this->_internal_set_dec_quote(from._internal_dec_quote());
  }
  if (from._internal_fee_bps() != 0) {
    _this->_internal_set_fee_bps(from._internal_fee_bps());
  }
  if (from._internal_sqrt_price_q64_pre() != 0) {
    _this->_internal_set_sqrt_price_q64_pre(from._internal_sqrt_price_q64_pre());
  }
  if (from._internal_sqrt_price_q64_post() != 0) {
    _this->_internal_set_sqrt_price_q64_post(from._internal_sqrt_price_q64_post());
  }
  if (from._internal_reserves_base() != 0) {
    _this->_internal_set_reserves_base(from._internal_reserves_base());
  }
  if (from._internal_reserves_quote() != 0) {
    _this->_internal_set_reserves_quote(from._internal_reserves_quote());
  }
  if (from._internal_provisional() != 0) {
    _this->_internal_set_provisional(from._internal_provisional());
  }
  if (from._internal_is_undo() != 0) {
    _this->_internal_set_is_undo(from._internal_is_undo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapEvent::CopyFrom(const SwapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.SwapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapEvent::IsInitialized() const {
  return true;
}

void SwapEvent::InternalSwap(SwapEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sig_, lhs_arena,
      &other->_impl_.sig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.program_id_, lhs_arena,
      &other->_impl_.program_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pool_id_, lhs_arena,
      &other->_impl_.pool_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mint_base_, lhs_arena,
      &other->_impl_.mint_base_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mint_quote_, lhs_arena,
      &other->_impl_.mint_quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapEvent, _impl_.is_undo_)
      + sizeof(SwapEvent::_impl_.is_undo_)
      - PROTOBUF_FIELD_OFFSET(SwapEvent, _impl_.chain_id_)>(
          reinterpret_cast<char*>(&_impl_.chain_id_),
          reinterpret_cast<char*>(&other->_impl_.chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[3]);
}

// ===================================================================

class PoolSnapshot::_Internal {
 public:
};

PoolSnapshot::PoolSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.PoolSnapshot)
}
PoolSnapshot::PoolSnapshot(const PoolSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PoolSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pool_id_){}
    , decltype(_impl_.mint_base_){}
    , decltype(_impl_.mint_quote_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.sqrt_price_q64_){}
    , decltype(_impl_.reserves_base_){}
    , decltype(_impl_.reserves_quote_){}
    , decltype(_impl_.liquidity_){}
    , decltype(_impl_.fee_bps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pool_id().empty()) {
    _this->_impl_.pool_id_.Set(from._internal_pool_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mint_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mint_base().empty()) {
    _this->_impl_.mint_base_.Set(from._internal_mint_base(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mint_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mint_quote().empty()) {
    _this->_impl_.mint_quote_.Set(from._internal_mint_quote(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fee_bps_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.fee_bps_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.PoolSnapshot)
}

inline void PoolSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pool_id_){}
    , decltype(_impl_.mint_base_){}
    , decltype(_impl_.mint_quote_){}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.slot_){uint64_t{0u}}
    , decltype(_impl_.sqrt_price_q64_){uint64_t{0u}}
    , decltype(_impl_.reserves_base_){uint64_t{0u}}
    , decltype(_impl_.reserves_quote_){uint64_t{0u}}
    , decltype(_impl_.liquidity_){uint64_t{0u}}
    , decltype(_impl_.fee_bps_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mint_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mint_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mint_quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PoolSnapshot::~PoolSnapshot() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.PoolSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoolSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pool_id_.Destroy();
  _impl_.mint_base_.Destroy();
  _impl_.mint_quote_.Destroy();
}

void PoolSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoolSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.PoolSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pool_id_.ClearToEmpty();
  _impl_.mint_base_.ClearToEmpty();
  _impl_.mint_quote_.ClearToEmpty();
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fee_bps_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.fee_bps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pool_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pool_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.PoolSnapshot.pool_id"));
        } else
          goto handle_unusual;
        continue;
      // string mint_base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mint_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.PoolSnapshot.mint_base"));
        } else
          goto handle_unusual;
        continue;
      // string mint_quote = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mint_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.PoolSnapshot.mint_quote"));
        } else
          goto handle_unusual;
        continue;
      // uint64 sqrt_price_q64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sqrt_price_q64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reserves_base = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.reserves_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reserves_quote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.reserves_quote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fee_bps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.fee_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 liquidity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.liquidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoolSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.PoolSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chain_id(), target);
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_slot(), target);
  }

  // string pool_id = 3;
  if (!this->_internal_pool_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pool_id().data(), static_cast<int>(this->_internal_pool_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.PoolSnapshot.pool_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pool_id(), target);
  }

  // string mint_base = 4;
  if (!this->_internal_mint_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_base().data(), static_cast<int>(this->_internal_mint_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.PoolSnapshot.mint_base");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mint_base(), target);
  }

  // string mint_quote = 5;
  if (!this->_internal_mint_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_quote().data(), static_cast<int>(this->_internal_mint_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.PoolSnapshot.mint_quote");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mint_quote(), target);
  }

  // uint64 sqrt_price_q64 = 6;
  if (this->_internal_sqrt_price_q64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sqrt_price_q64(), target);
  }

  // uint64 reserves_base = 7;
  if (this->_internal_reserves_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_reserves_base(), target);
  }

  // uint64 reserves_quote = 8;
  if (this->_internal_reserves_quote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_reserves_quote(), target);
  }

  // uint32 fee_bps = 9;
  if (this->_internal_fee_bps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fee_bps(), target);
  }

  // uint64 liquidity = 10;
  if (this->_internal_liquidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_liquidity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.PoolSnapshot)
  return target;
}

size_t PoolSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.PoolSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pool_id = 3;
  if (!this->_internal_pool_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pool_id());
  }

  // string mint_base = 4;
  if (!this->_internal_mint_base().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_base());
  }

  // string mint_quote = 5;
  if (!this->_internal_mint_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_quote());
  }

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_slot());
  }

  // uint64 sqrt_price_q64 = 6;
  if (this->_internal_sqrt_price_q64() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sqrt_price_q64());
  }

  // uint64 reserves_base = 7;
  if (this->_internal_reserves_base() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reserves_base());
  }

  // uint64 reserves_quote = 8;
  if (this->_internal_reserves_quote() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reserves_quote());
  }

  // uint64 liquidity = 10;
  if (this->_internal_liquidity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_liquidity());
  }

  // uint32 fee_bps = 9;
  if (this->_internal_fee_bps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fee_bps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoolSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PoolSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoolSnapshot::GetClassData() const { return &_class_data_; }


void PoolSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PoolSnapshot*>(&to_msg);
  auto& from = static_cast<const PoolSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.PoolSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pool_id().empty()) {
    _this->_internal_set_pool_id(from._internal_pool_id());
  }
  if (!from._internal_mint_base().empty()) {
    _this->_internal_set_mint_base(from._internal_mint_base());
  }
  if (!from._internal_mint_quote().empty()) {
    _this->_internal_set_mint_quote(from._internal_mint_quote());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_sqrt_price_q64() != 0) {
    _this->_internal_set_sqrt_price_q64(from._internal_sqrt_price_q64());
  }
  if (from._internal_reserves_base() != 0) {
    _this->_internal_set_reserves_base(from._internal_reserves_base());
  }
  if (from._internal_reserves_quote() != 0) {
    _this->_internal_set_reserves_quote(from._internal_reserves_quote());
  }
  if (from._internal_liquidity() != 0) {
    _this->_internal_set_liquidity(from._internal_liquidity());
  }
  if (from._internal_fee_bps() != 0) {
    _this->_internal_set_fee_bps(from._internal_fee_bps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoolSnapshot::CopyFrom(const PoolSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.PoolSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolSnapshot::IsInitialized() const {
  return true;
}

void PoolSnapshot::InternalSwap(PoolSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pool_id_, lhs_arena,
      &other->_impl_.pool_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mint_base_, lhs_arena,
      &other->_impl_.mint_base_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mint_quote_, lhs_arena,
      &other->_impl_.mint_quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoolSnapshot, _impl_.fee_bps_)
      + sizeof(PoolSnapshot::_impl_.fee_bps_)
      - PROTOBUF_FIELD_OFFSET(PoolSnapshot, _impl_.chain_id_)>(
          reinterpret_cast<char*>(&_impl_.chain_id_),
          reinterpret_cast<char*>(&other->_impl_.chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[4]);
}

// ===================================================================

class Candle::_Internal {
 public:
  static const ::dex::sol::v1::U128& vwap_num(const Candle* msg);
  static const ::dex::sol::v1::U128& vwap_den(const Candle* msg);
  static const ::dex::sol::v1::U128& vol_base(const Candle* msg);
  static const ::dex::sol::v1::U128& vol_quote(const Candle* msg);
};

const ::dex::sol::v1::U128&
Candle::_Internal::vwap_num(const Candle* msg) {
  return *msg->_impl_.vwap_num_;
}
const ::dex::sol::v1::U128&
Candle::_Internal::vwap_den(const Candle* msg) {
  return *msg->_impl_.vwap_den_;
}
const ::dex::sol::v1::U128&
Candle::_Internal::vol_base(const Candle* msg) {
  return *msg->_impl_.vol_base_;
}
const ::dex::sol::v1::U128&
Candle::_Internal::vol_quote(const Candle* msg) {
  return *msg->_impl_.vol_quote_;
}
Candle::Candle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Candle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pair_id_){}
    , decltype(_impl_.pool_id_){}
    , decltype(_impl_.timeframe_){}
    , decltype(_impl_.vwap_num_){nullptr}
    , decltype(_impl_.vwap_den_){nullptr}
    , decltype(_impl_.vol_base_){nullptr}
    , decltype(_impl_.vol_quote_){nullptr}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.window_start_){}
    , decltype(_impl_.open_px_q32_){}
    , decltype(_impl_.provisional_){}
    , decltype(_impl_.is_correction_){}
    , decltype(_impl_.trades_){}
    , decltype(_impl_.high_px_q32_){}
    , decltype(_impl_.low_px_q32_){}
    , decltype(_impl_.close_px_q32_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pair_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pair_id().empty()) {
    _this->_impl_.pair_id_.Set(from._internal_pair_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pool_id().empty()) {
    _this->_impl_.pool_id_.Set(from._internal_pool_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeframe().empty()) {
    _this->_impl_.timeframe_.Set(from._internal_timeframe(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vwap_num()) {
    _this->_impl_.vwap_num_ = new ::dex::sol::v1::U128(*from._impl_.vwap_num_);
  }
  if (from._internal_has_vwap_den()) {
    _this->_impl_.vwap_den_ = new ::dex::sol::v1::U128(*from._impl_.vwap_den_);
  }
  if (from._internal_has_vol_base()) {
    _this->_impl_.vol_base_ = new ::dex::sol::v1::U128(*from._impl_.vol_base_);
  }
  if (from._internal_has_vol_quote()) {
    _this->_impl_.vol_quote_ = new ::dex::sol::v1::U128(*from._impl_.vol_quote_);
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.close_px_q32_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.close_px_q32_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.Candle)
}

inline void Candle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pair_id_){}
    , decltype(_impl_.pool_id_){}
    , decltype(_impl_.timeframe_){}
    , decltype(_impl_.vwap_num_){nullptr}
    , decltype(_impl_.vwap_den_){nullptr}
    , decltype(_impl_.vol_base_){nullptr}
    , decltype(_impl_.vol_quote_){nullptr}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.window_start_){uint64_t{0u}}
    , decltype(_impl_.open_px_q32_){int64_t{0}}
    , decltype(_impl_.provisional_){false}
    , decltype(_impl_.is_correction_){false}
    , decltype(_impl_.trades_){0u}
    , decltype(_impl_.high_px_q32_){int64_t{0}}
    , decltype(_impl_.low_px_q32_){int64_t{0}}
    , decltype(_impl_.close_px_q32_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pair_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.Candle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Candle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pair_id_.Destroy();
  _impl_.pool_id_.Destroy();
  _impl_.timeframe_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vwap_num_;
  if (this != internal_default_instance()) delete _impl_.vwap_den_;
  if (this != internal_default_instance()) delete _impl_.vol_base_;
  if (this != internal_default_instance()) delete _impl_.vol_quote_;
}

void Candle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.Candle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pair_id_.ClearToEmpty();
  _impl_.pool_id_.ClearToEmpty();
  _impl_.timeframe_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_num_ != nullptr) {
    delete _impl_.vwap_num_;
  }
  _impl_.vwap_num_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_den_ != nullptr) {
    delete _impl_.vwap_den_;
  }
  _impl_.vwap_den_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vol_base_ != nullptr) {
    delete _impl_.vol_base_;
  }
  _impl_.vol_base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vol_quote_ != nullptr) {
    delete _impl_.vol_quote_;
  }
  _impl_.vol_quote_ = nullptr;
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.close_px_q32_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.close_px_q32_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pair_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.Candle.pair_id"));
        } else
          goto handle_unusual;
        continue;
      // string pool_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pool_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.Candle.pool_id"));
        } else
          goto handle_unusual;
        continue;
      // string timeframe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timeframe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.Candle.timeframe"));
        } else
          goto handle_unusual;
        continue;
      // uint64 window_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.window_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool provisional = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.provisional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_correction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 open_px_q32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.open_px_q32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 high_px_q32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.high_px_q32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 low_px_q32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.low_px_q32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 close_px_q32 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.close_px_q32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dex.sol.v1.U128 vwap_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vwap_num(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dex.sol.v1.U128 vwap_den = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_vwap_den(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dex.sol.v1.U128 vol_base = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vol_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dex.sol.v1.U128 vol_quote = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vol_quote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 trades = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Candle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.Candle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chain_id(), target);
  }

  // string pair_id = 2;
  if (!this->_internal_pair_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pair_id().data(), static_cast<int>(this->_internal_pair_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.Candle.pair_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pair_id(), target);
  }

  // string pool_id = 3;
  if (!this->_internal_pool_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pool_id().data(), static_cast<int>(this->_internal_pool_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.Candle.pool_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pool_id(), target);
  }

  // string timeframe = 4;
  if (!this->_internal_timeframe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeframe().data(), static_cast<int>(this->_internal_timeframe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.Candle.timeframe");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeframe(), target);
  }

  // uint64 window_start = 5;
  if (this->_internal_window_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_window_start(), target);
  }

  // bool provisional = 6;
  if (this->_internal_provisional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_provisional(), target);
  }

  // bool is_correction = 7;
  if (this->_internal_is_correction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_correction(), target);
  }

  // int64 open_px_q32 = 10;
  if (this->_internal_open_px_q32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_open_px_q32(), target);
  }

  // int64 high_px_q32 = 11;
  if (this->_internal_high_px_q32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_high_px_q32(), target);
  }

  // int64 low_px_q32 = 12;
  if (this->_internal_low_px_q32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_low_px_q32(), target);
  }

  // int64 close_px_q32 = 13;
  if (this->_internal_close_px_q32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_close_px_q32(), target);
  }

  // .dex.sol.v1.U128 vwap_num = 14;
  if (this->_internal_has_vwap_num()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::vwap_num(this),
        _Internal::vwap_num(this).GetCachedSize(), target, stream);
  }

  // .dex.sol.v1.U128 vwap_den = 15;
  if (this->_internal_has_vwap_den()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::vwap_den(this),
        _Internal::vwap_den(this).GetCachedSize(), target, stream);
  }

  // .dex.sol.v1.U128 vol_base = 16;
  if (this->_internal_has_vol_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::vol_base(this),
        _Internal::vol_base(this).GetCachedSize(), target, stream);
  }

  // .dex.sol.v1.U128 vol_quote = 17;
  if (this->_internal_has_vol_quote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::vol_quote(this),
        _Internal::vol_quote(this).GetCachedSize(), target, stream);
  }

  // uint32 trades = 18;
  if (this->_internal_trades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_trades(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.Candle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pair_id = 2;
  if (!this->_internal_pair_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pair_id());
  }

  // string pool_id = 3;
  if (!this->_internal_pool_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pool_id());
  }

  // string timeframe = 4;
  if (!this->_internal_timeframe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeframe());
  }

  // .dex.sol.v1.U128 vwap_num = 14;
  if (this->_internal_has_vwap_num()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vwap_num_);
  }

  // .dex.sol.v1.U128 vwap_den = 15;
  if (this->_internal_has_vwap_den()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vwap_den_);
  }

  // .dex.sol.v1.U128 vol_base = 16;
  if (this->_internal_has_vol_base()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vol_base_);
  }

  // .dex.sol.v1.U128 vol_quote = 17;
  if (this->_internal_has_vol_quote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vol_quote_);
  }

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 window_start = 5;
  if (this->_internal_window_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_window_start());
  }

  // int64 open_px_q32 = 10;
  if (this->_internal_open_px_q32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_open_px_q32());
  }

  // bool provisional = 6;
  if (this->_internal_provisional() != 0) {
    total_size += 1 + 1;
  }

  // bool is_correction = 7;
  if (this->_internal_is_correction() != 0) {
    total_size += 1 + 1;
  }

  // uint32 trades = 18;
  if (this->_internal_trades() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_trades());
  }

  // int64 high_px_q32 = 11;
  if (this->_internal_high_px_q32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_high_px_q32());
  }

  // int64 low_px_q32 = 12;
  if (this->_internal_low_px_q32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_low_px_q32());
  }

  // int64 close_px_q32 = 13;
  if (this->_internal_close_px_q32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_close_px_q32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Candle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Candle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Candle::GetClassData() const { return &_class_data_; }


void Candle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Candle*>(&to_msg);
  auto& from = static_cast<const Candle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.Candle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pair_id().empty()) {
    _this->_internal_set_pair_id(from._internal_pair_id());
  }
  if (!from._internal_pool_id().empty()) {
    _this->_internal_set_pool_id(from._internal_pool_id());
  }
  if (!from._internal_timeframe().empty()) {
    _this->_internal_set_timeframe(from._internal_timeframe());
  }
  if (from._internal_has_vwap_num()) {
    _this->_internal_mutable_vwap_num()->::dex::sol::v1::U128::MergeFrom(
        from._internal_vwap_num());
  }
  if (from._internal_has_vwap_den()) {
    _this->_internal_mutable_vwap_den()->::dex::sol::v1::U128::MergeFrom(
        from._internal_vwap_den());
  }
  if (from._internal_has_vol_base()) {
    _this->_internal_mutable_vol_base()->::dex::sol::v1::U128::MergeFrom(
        from._internal_vol_base());
  }
  if (from._internal_has_vol_quote()) {
    _this->_internal_mutable_vol_quote()->::dex::sol::v1::U128::MergeFrom(
        from._internal_vol_quote());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_window_start() != 0) {
    _this->_internal_set_window_start(from._internal_window_start());
  }
  if (from._internal_open_px_q32() != 0) {
    _this->_internal_set_open_px_q32(from._internal_open_px_q32());
  }
  if (from._internal_provisional() != 0) {
    _this->_internal_set_provisional(from._internal_provisional());
  }
  if (from._internal_is_correction() != 0) {
    _this->_internal_set_is_correction(from._internal_is_correction());
  }
  if (from._internal_trades() != 0) {
    _this->_internal_set_trades(from._internal_trades());
  }
  if (from._internal_high_px_q32() != 0) {
    _this->_internal_set_high_px_q32(from._internal_high_px_q32());
  }
  if (from._internal_low_px_q32() != 0) {
    _this->_internal_set_low_px_q32(from._internal_low_px_q32());
  }
  if (from._internal_close_px_q32() != 0) {
    _this->_internal_set_close_px_q32(from._internal_close_px_q32());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pair_id_, lhs_arena,
      &other->_impl_.pair_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pool_id_, lhs_arena,
      &other->_impl_.pool_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeframe_, lhs_arena,
      &other->_impl_.timeframe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candle, _impl_.close_px_q32_)
      + sizeof(Candle::_impl_.close_px_q32_)
      - PROTOBUF_FIELD_OFFSET(Candle, _impl_.vwap_num_)>(
          reinterpret_cast<char*>(&_impl_.vwap_num_),
          reinterpret_cast<char*>(&other->_impl_.vwap_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[5]);
}

// ===================================================================

class WalletHeuristics::_Internal {
 public:
};

WalletHeuristics::WalletHeuristics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dex.sol.v1.WalletHeuristics)
}
WalletHeuristics::WalletHeuristics(const WalletHeuristics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletHeuristics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wallet_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.first_seen_slot_){}
    , decltype(_impl_.swaps_24h_){}
    , decltype(_impl_.swaps_7d_){}
    , decltype(_impl_.is_fresh_){}
    , decltype(_impl_.is_sniper_){}
    , decltype(_impl_.bundled_pct_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wallet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wallet_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wallet().empty()) {
    _this->_impl_.wallet_.Set(from._internal_wallet(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bundled_pct_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.bundled_pct_));
  // @@protoc_insertion_point(copy_constructor:dex.sol.v1.WalletHeuristics)
}

inline void WalletHeuristics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wallet_){}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.first_seen_slot_){uint64_t{0u}}
    , decltype(_impl_.swaps_24h_){0u}
    , decltype(_impl_.swaps_7d_){0u}
    , decltype(_impl_.is_fresh_){false}
    , decltype(_impl_.is_sniper_){false}
    , decltype(_impl_.bundled_pct_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.wallet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wallet_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletHeuristics::~WalletHeuristics() {
  // @@protoc_insertion_point(destructor:dex.sol.v1.WalletHeuristics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletHeuristics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wallet_.Destroy();
}

void WalletHeuristics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletHeuristics::Clear() {
// @@protoc_insertion_point(message_clear_start:dex.sol.v1.WalletHeuristics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wallet_.ClearToEmpty();
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bundled_pct_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.bundled_pct_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletHeuristics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wallet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wallet();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dex.sol.v1.WalletHeuristics.wallet"));
        } else
          goto handle_unusual;
        continue;
      // uint64 first_seen_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.first_seen_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 swaps_24h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.swaps_24h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 swaps_7d = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.swaps_7d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_fresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_fresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_sniper = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_sniper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float bundled_pct = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.bundled_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletHeuristics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dex.sol.v1.WalletHeuristics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chain_id(), target);
  }

  // string wallet = 2;
  if (!this->_internal_wallet().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wallet().data(), static_cast<int>(this->_internal_wallet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dex.sol.v1.WalletHeuristics.wallet");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wallet(), target);
  }

  // uint64 first_seen_slot = 3;
  if (this->_internal_first_seen_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_first_seen_slot(), target);
  }

  // uint32 swaps_24h = 4;
  if (this->_internal_swaps_24h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_swaps_24h(), target);
  }

  // uint32 swaps_7d = 5;
  if (this->_internal_swaps_7d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_swaps_7d(), target);
  }

  // bool is_fresh = 6;
  if (this->_internal_is_fresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_fresh(), target);
  }

  // bool is_sniper = 7;
  if (this->_internal_is_sniper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_sniper(), target);
  }

  // float bundled_pct = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bundled_pct = this->_internal_bundled_pct();
  uint32_t raw_bundled_pct;
  memcpy(&raw_bundled_pct, &tmp_bundled_pct, sizeof(tmp_bundled_pct));
  if (raw_bundled_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bundled_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dex.sol.v1.WalletHeuristics)
  return target;
}

size_t WalletHeuristics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dex.sol.v1.WalletHeuristics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string wallet = 2;
  if (!this->_internal_wallet().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wallet());
  }

  // uint64 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 first_seen_slot = 3;
  if (this->_internal_first_seen_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first_seen_slot());
  }

  // uint32 swaps_24h = 4;
  if (this->_internal_swaps_24h() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_swaps_24h());
  }

  // uint32 swaps_7d = 5;
  if (this->_internal_swaps_7d() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_swaps_7d());
  }

  // bool is_fresh = 6;
  if (this->_internal_is_fresh() != 0) {
    total_size += 1 + 1;
  }

  // bool is_sniper = 7;
  if (this->_internal_is_sniper() != 0) {
    total_size += 1 + 1;
  }

  // float bundled_pct = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bundled_pct = this->_internal_bundled_pct();
  uint32_t raw_bundled_pct;
  memcpy(&raw_bundled_pct, &tmp_bundled_pct, sizeof(tmp_bundled_pct));
  if (raw_bundled_pct != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletHeuristics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletHeuristics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletHeuristics::GetClassData() const { return &_class_data_; }


void WalletHeuristics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletHeuristics*>(&to_msg);
  auto& from = static_cast<const WalletHeuristics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dex.sol.v1.WalletHeuristics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wallet().empty()) {
    _this->_internal_set_wallet(from._internal_wallet());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_first_seen_slot() != 0) {
    _this->_internal_set_first_seen_slot(from._internal_first_seen_slot());
  }
  if (from._internal_swaps_24h() != 0) {
    _this->_internal_set_swaps_24h(from._internal_swaps_24h());
  }
  if (from._internal_swaps_7d() != 0) {
    _this->_internal_set_swaps_7d(from._internal_swaps_7d());
  }
  if (from._internal_is_fresh() != 0) {
    _this->_internal_set_is_fresh(from._internal_is_fresh());
  }
  if (from._internal_is_sniper() != 0) {
    _this->_internal_set_is_sniper(from._internal_is_sniper());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bundled_pct = from._internal_bundled_pct();
  uint32_t raw_bundled_pct;
  memcpy(&raw_bundled_pct, &tmp_bundled_pct, sizeof(tmp_bundled_pct));
  if (raw_bundled_pct != 0) {
    _this->_internal_set_bundled_pct(from._internal_bundled_pct());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletHeuristics::CopyFrom(const WalletHeuristics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dex.sol.v1.WalletHeuristics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletHeuristics::IsInitialized() const {
  return true;
}

void WalletHeuristics::InternalSwap(WalletHeuristics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wallet_, lhs_arena,
      &other->_impl_.wallet_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletHeuristics, _impl_.bundled_pct_)
      + sizeof(WalletHeuristics::_impl_.bundled_pct_)
      - PROTOBUF_FIELD_OFFSET(WalletHeuristics, _impl_.chain_id_)>(
          reinterpret_cast<char*>(&_impl_.chain_id_),
          reinterpret_cast<char*>(&other->_impl_.chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletHeuristics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_getter, &descriptor_table_dex_2fsol_2fv1_2fcore_2eproto_once,
      file_level_metadata_dex_2fsol_2fv1_2fcore_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sol
}  // namespace dex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dex::sol::v1::U128*
Arena::CreateMaybeMessage< ::dex::sol::v1::U128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::U128 >(arena);
}
template<> PROTOBUF_NOINLINE ::dex::sol::v1::BlockHead*
Arena::CreateMaybeMessage< ::dex::sol::v1::BlockHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::BlockHead >(arena);
}
template<> PROTOBUF_NOINLINE ::dex::sol::v1::TxMeta*
Arena::CreateMaybeMessage< ::dex::sol::v1::TxMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::TxMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::dex::sol::v1::SwapEvent*
Arena::CreateMaybeMessage< ::dex::sol::v1::SwapEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::SwapEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dex::sol::v1::PoolSnapshot*
Arena::CreateMaybeMessage< ::dex::sol::v1::PoolSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::PoolSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::dex::sol::v1::Candle*
Arena::CreateMaybeMessage< ::dex::sol::v1::Candle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::dex::sol::v1::WalletHeuristics*
Arena::CreateMaybeMessage< ::dex::sol::v1::WalletHeuristics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dex::sol::v1::WalletHeuristics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
